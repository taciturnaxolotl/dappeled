---
import Layout from "../layouts/Layout.astro";
import spotify from "../assets/spotify.svg";
import appleMusic from "../assets/apple-music.svg";
import apple from "../assets/green-apple.svg";
import buttonPress from "../assets/button-press.mp3";
import appleHello from "../assets/hello.mp3";
import { Image } from "astro:assets";
import { SPOTIFY_CLIENT_ID, SPOTIFY_REDIRECT_URI } from "astro:env/server";

// check if the user is signed in to spotify
const spotifyUser = Astro.cookies.get("spotify_user")?.value;
const spotifyToken = Astro.cookies.get("spotify_access_token")?.value;

const appleUser = Astro.cookies.get("apple_user")?.value;
---

<Layout
    title="Dappeled: The Spotify to Apple Music converter that won't make you cry 🍏"
>
    <h1 class="text-center">Welcome to Dappeled!</h1>
    <Image
        src={apple}
        alt="green apple"
        style={{
            transform: "translateY(-1.3rem)",
            marginBottom: "2rem",
            maxWidth: "100%",
            width: "30rem",
            height: "auto",
        }}
    />
    <audio id="appleSound" src={appleHello}></audio>
    <audio id="buttonSound" src={buttonPress}></audio>
    <button
        class={`button ${spotifyUser ? "complete" : ""}`}
        style={{ width: "22rem", marginBottom: "1rem" }}
        id="spotifyButton"
        data-spotify-client-id={SPOTIFY_CLIENT_ID}
        data-spotify-redirect-uri={SPOTIFY_REDIRECT_URI}
        disabled={spotifyUser}
    >
        <Image
            src={spotify}
            alt="Spotify logo"
            class="w-12 mr-2 align-middle"
        />
        <span style="transition: opacity 0.3s">
            {spotifyUser ? "✓ Signed in with Spotify" : "Sign in with Spotify"}
        </span>
    </button>
    <button
        id="appleMusicButton"
        class={`button ${spotifyToken ? "" : "disabled"} ${
            appleUser ? "complete" : ""
        }`}
        style={{ width: "22rem" }}
        disabled={!spotifyToken || appleUser}
        type="button"
    >
        <Image
            src={appleMusic}
            alt="Apple Music logo"
            class="w-12 mr-2 align-middle"
        />
        <span style="transition: opacity 0.3s">
            {
                appleUser
                    ? "✓ Signed in with Apple Music"
                    : "Sign in with Apple Music"
            }
        </span>
    </button>
</Layout>

<style>
    @keyframes bounce {
        0%,
        100% {
            transform: translateY(-1.3rem) rotate(0deg);
        }
        25% {
            transform: translateY(-2.3rem) rotate(15deg);
        }
        50% {
            transform: translateY(-2.3rem) rotate(-15deg);
        }
        75% {
            transform: translateY(-2rem) rotate(10deg);
        }
    }
</style>

<script>
    import { generateRandomString, sha256, base64encode } from "../utils/pkce";

    const playButtonSound = (button: HTMLElement, callback: () => void) => {
        const buttonSound = document.getElementById(
            "buttonSound",
        ) as HTMLAudioElement;

        if (
            !window.matchMedia("(prefers-reduced-motion: reduce)").matches &&
            buttonSound
        ) {
            buttonSound.addEventListener("ended", callback);
            setTimeout(
                () => {
                    button.classList.remove("active");
                    callback();
                },
                (buttonSound.duration * 1000) / 2,
            );
            buttonSound.play();
        } else {
            callback();
        }
    };

    // roughly every 15ish seconds with a bit of random play hello
    const appleSound = document.getElementById(
        "appleSound",
    ) as HTMLAudioElement;
    const appleSvg = document.querySelector(
        "img[alt='green apple']",
    ) as HTMLImageElement;

    if (appleSound && appleSvg) {
        appleSvg.style.cursor = "pointer";
        appleSvg.addEventListener("click", () => {
            appleSound.volume = 0.2;
            appleSound.play();

            appleSvg.style.animation = "bounce 0.5s ease";
            appleSvg.addEventListener(
                "animationend",
                () => {
                    appleSvg.style.animation = "";
                },
                { once: true },
            );
        });
    }

    const handleButtonClick = async (button: HTMLElement) => {
        if (button.getAttribute("disabled")) return;

        button.classList.add("active");

        if (button.id === "spotifyButton") {
            const clientId = button.getAttribute("data-spotify-client-id");
            const redirectUri = button.getAttribute(
                "data-spotify-redirect-uri",
            );
            const scope = "user-read-private user-read-email";
            const authUrl = new URL("https://accounts.spotify.com/authorize");

            const codeVerifier = generateRandomString(64);
            const hashed = await sha256(codeVerifier);
            const codeChallenge = base64encode(hashed);

            document.cookie = `code_verifier=${codeVerifier}; path=/`;

            const params: Record<string, string> = {
                response_type: "code",
                client_id: clientId || "",
                scope,
                code_challenge_method: "S256",
                code_challenge: codeChallenge,
                redirect_uri: redirectUri || "",
            };

            authUrl.search = new URLSearchParams(params).toString();

            playButtonSound(button, () => {
                window.location.href = authUrl.toString();
            });
            return;
        }

        if (button.id === "appleMusicButton") {
            playButtonSound(button, () => {
                window.open("https://music.apple.com/us/login", "_blank");
            });
        }
    };

    const spotifyButton = document.getElementById("spotifyButton");
    if (spotifyButton) {
        spotifyButton.addEventListener("click", function () {
            handleButtonClick(this);
        });
    }

    const appleMusicButton = document.getElementById("appleMusicButton");
    if (appleMusicButton) {
        appleMusicButton.addEventListener("click", function () {
            handleButtonClick(this);
        });
    }
</script>
